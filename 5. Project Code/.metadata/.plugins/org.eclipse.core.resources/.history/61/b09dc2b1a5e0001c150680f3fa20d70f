<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>일근태기록/조회</title>
<style type="text/css">

#dayAttdrequest_tabs {
	width: 450px;
	height: 500px;
	display: inline-block;
	
	
}

#dayAttdList_tabs {
	width: 480px;
	height: 500px;
	display: inline-block;
	
}

input[type=text] :not(#timePicker) {
	width: 180px;
	height:10px;
}

.small_Btn {
	width: auto;
	height: auto;
	fontSize: 15px;
}

#clock {
	margin: auto;
}



</style>

<script>
var empCode = "${sessionScope.code}";
var currentHours = 0; 	// 시계의 시간
var currentMinute = 0;	// 시계의 분
var amPm;    			// 시계의 AM,PM
var conversionDate = 0; // timePicker의 :를 제거하고 자정 이후의 시간을 변환한 값	
var dayAttdList = []; 	// 근태목록
var holidayList = []; 	// 휴일목록
var isHoliday = false; 	// 휴일여부
var isEarlyOut = false ; 	// 조퇴여부
var restTypeCode = []; 	// 근태외코드	
var earlyOutTime = 0; 	// 조퇴시간
var leaveTime = [];		// 외출

	
$(document).ready(function(){	
	var today=$.datepicker.formatDate($.datepicker.ATOM,new Date()); 
					// 오늘 날짜를 ATOM dateFormat으로 변환하여 현재 datepicker 포맷을 지정해줌. // 오늘 날짜 바로 적용되게
					/* 
					   $.datepicker.ATOM   =   'yy-mm-dd' ┓
														  ┣ 미리 정의되어 있는 날짜형식. 이 외에도 몇개 더 정의되어있음
					   $.datepicker.COOKIE = 'D, dd M yy' ┛ https://api.jqueryui.com/datepicker/
					*/
	
	$("#applyDay").val(today);  //적용일자
	
	printClock(); 				// 시계표시함수 호출
	findDayAttdList("today"); 	// 시작하자마자 오늘 날짜의 근태목록을 조회목록 grid에 띄움
	//showDayAttdListGrid(); 	// 여기서 뿌려줄 필요  X <== findDayAttdList("today"); 안에서 뿌려준다.

	$(":text:not(#timePicker)").button();  	// timePicker가 아닌 form들을 바꿔줌. - : 선택자 
  	$("#timePicker").button().css({width : "200px",height : "40px"});; //버튼 크기 지정
	$(".small_Btn").button();

	$("#dayAttdrequest_tabs").tabs(); 		// tab 기능으로 바꿔줌 -- <li><a href="#해당div">탭 이름</a></li>
	$("#dayAttdList_tabs").tabs();

  	getDatePicker($("#applyDay")); 			// 적용일자
 	getDatePicker($("#searchDay")); 		// 조회일자

 	/*
	$("#dayAttdrequest_col").click(function(){ 	//일근태기록 탭을 클릭하면 조회목록 grid의 row값을 오늘 근태목록으로 바꿈
 		findDayAttdList("today");
	})
	*/

	$("#attdTypeName").click(function(){ 	// 근태구분 입력창
   		getCode("T0","attdTypeName","attdTypeCode"); //CO-09:출근,퇴근,외출,귀사,교육,출장
	});

	$("#registDayAttd_Btn").click(registDayAttd); 			// 기록하기 버튼  
	//$("#search_dayAttdList_Btn").click(findDayAttdList); 	// 조회버튼
	$("#delete_dayAttd_Btn").click(removeDayAttdList);     //삭제버튼
	/*
	$("#delete_dayAttd_Btn").click(function(){ 				// 삭제버튼   
		//var flag = confirm("선택한 근태신청을 정말 삭제하시겠습니까?");
   		//if(flag){ 
   			removeDayAttdList(); 
   		//}
  	});*/
  
	$("#timePicker").click(function(){ 		// timePicker
		$(this).timepicker({
    						step: 5,            		//시간간격 : 5분
    						timeFormat: "H:i",   		//시간:분 으로표시
    						minTime: "00:00am",         //표시되는 최소값
    						maxTime: "23:55pm"          //표시되는 최대값
   							});
  	})

  	$("#timeCheck_Btn").click(function(){ 	// 현시각기록 버튼 눌렀을때
		var checkHours = $("#clock").text().split(" ")[0].substring(0,2); 	// 16:45:40 PM 일때 16 추출
		var checkMinute = $("#clock").text().split(" ")[0].substring(3,5);	// 16:45:40 PM 일때 45 추출
		registDayAttd("Clock",checkHours+checkMinute);
		})
		
  	$("#applyDay").change(function(){		// 적용일자를 바꿨을 때 조회목록 grid의 row값을 해당 날짜목록으로 바꿈
  		findDayAttdList("applyDay");
  	});
 });

	
/* 시계 만드는 함수 */
function printClock() {    
	var clock = $("#clock");           		// 출력할 장소 선택
    var currentDate = new Date();      		// 현재시간
    var calendar = currentDate.getFullYear() + "-" + (currentDate.getMonth()+1) + "-" + currentDate.getDate() 	// 현재 날짜 //2020-1-17
    amPm = 'AM'; 							// 초기값 AM
    currentHours = addZeros(currentDate.getHours(),2); 
    currentMinute = addZeros(currentDate.getMinutes() ,2); 
    var currentSeconds = addZeros(currentDate.getSeconds(),2);
     
    if(currentHours >= 12){ 				// 시간이 12보다 클 때 PM으로 세팅
    	amPm = 'PM';
     	currentHours = addZeros(currentHours,2);
    }
     
    currentSeconds = '<span style="font-size:25px">'+currentSeconds+'</span>'; 

    clock.html(currentHours+":"+currentMinute+":"+currentSeconds +" <span style='font-size:50px;'>"+ amPm+"</span>"); 	//날짜를 출력해 줌
     
    //setTimeout("printClock()",1000); 		// 1초마다 printClock() 함수 호출 // 되도록이면 밑에껄로 호출해라?
    setTimeout(printClock, 1000);
}


function addZeros(num, digit) { 			// 시계 자릿수 맞춰주기 // 9시 일경우 09시로 만들어줌 
	var zero = '';
    num = num.toString();
    if (num.length < digit) {
    	for (i = 0; i < digit - num.length; i++) {
        zero += '0';
    	}
    }
    return zero + num;
}


/* 일근태목록 조회 함수 */ 
function findDayAttdList(check){
	var searchDay = "";
	
	if(check=="today"){ 					// 시작하자마자 이 함수로 변수"today"가 넘어와서 오늘 날짜의 근태기록이 조회목록으로 넘어간다
		var today = new Date();	
	    var rrrr = today.getFullYear();
	    var mm = today.getMonth()+1;
	    var dd = today.getDate();
	    searchDay = rrrr+"-"+mm+"-"+dd;
	}else if(check=="applyDay"){			// #applyDay의 값이 바뀔때 #applyDay의 해당 날짜를 받아와서 searchDay변수에 담는다. // 새로 추가함
		searchDay = $("#applyDay").val();
	}/* else{									// 일근태조회 탭에서 조회를 클릭할 때 #searchDay의 해당 날짜를 받아와서 searchDay변수에 담는다. 
		searchDay = $("#searchDay").val();
	} //class=searchDay가 없는걸로 보아 dayAttendanceManage의 소스를 긁어오고 수정을 못한듯 */ 
	$.ajax({
			
   			url:"${pageContext.request.contextPath}/attendance/dayAttendance.do",
   			data:{
    			"method" 	: "findDayAttdList",
    			"empCode" 	: empCode,
    			"applyDay"	: searchDay
   			},
   			dataType:"json",
			success : function(data){						
						if(data.errorCode < 0){
	     					var str = "There was an internal server error.\n";
	     					str += "Please ask the manager.\n";
	     					str += "Error location : " + $(this).attr("id");
	     					str += "Error message : " + data.errorMsg;     										
	     					alert(str);
     						return;
    					}
						
    					dayAttdList = data.dayAttdList;
    					for(var index in dayAttdList){
     							dayAttdList[index].applyDay = getRealDay(dayAttdList[index].time, dayAttdList[index].applyDay);
     							dayAttdList[index].time = getRealTime(dayAttdList[index].time);
    					}
    					showDayAttdListGrid();
   			}
  	});
}


/* 0000단위인 시간을 00:00(실제시간)으로 변환하는 함수 */
function getRealTime(time){
	// 소수점 버림, 정수형 반환
  	var hour = Math.floor(time/100); 
  	if(hour>=24) {
  		hour -= 24; 						// 데이터 베이스에 넘길때는 25시로 받고나서 grid에 표시하는건 1시로
  	}
  	var min = time-(Math.floor(time/100)*100);
  	if(min.toString().length==1) 
  		min="0"+min; 					// 분이 1자리라면 앞에 0을 붙임
  	if(min==0) 
  		min="00";
  	return hour + ":" + min;
}

/* 2400시 이상일때 날짜를 다음날로 출력해줌*/
function getRealDay(time, applyDay){
	// 주어진 숫자와 같거나 작은 정수 중에서 가장 큰 수를 반환	
	var hour = Math.floor(time/100); 
	var date = new Date(applyDay+'/00:00:00');
  	if(hour>=24) {
		date.setDate(date.getDate()+1)
		applyDay = date.getFullYear()+'/' + ('0'+(date.getMonth()+1)).slice(-2) + '/' + ('0' + date.getDate()).slice(-2);
  	}                                                               //slice(-2) -> 마지막 2개의 요소를 추출
  	return applyDay;
}


/* 일근태목록 정보를 그리드에 뿌려주는 함수 */
function showDayAttdListGrid(){
	var columnDefs = [
		{headerName: "사원코드", field: "empCode", hide:true },
	    {headerName: "일련번호", field: "dayAttdCode", hide:true },
	    {headerName: "Date", field: "applyDay", checkboxSelection: true },
	    {headerName: "Code", field: "attdTypeCode",hide:true},
	    {headerName: "Name", field: "attdTypeName"},
	    {headerName: "The start time", field: "time"}
	];
	gridOptions = {
		columnDefs: columnDefs,
		rowData: dayAttdList,
		defaultColDef: { 
			editable: false, //내용 수정 가부
			width: 100,
			sortable : false, //칼럼별 정렬 가부
			resizable: true, //칼럼 폭 조절 가부
			filter: false //내용 필터링 가부
		},
		rowSelection: 'multiple',	/* 'single'- 단일선택 or 'multiple' - 다중선택,*/
		// enableColResize: true,	// 구버전으로 사용 안하는걸 추천 위에 resizable:true로 대체
		// enableSorting : true, 	// 구버전으로 사용 안하는걸 추천 위에 sortable:true로 대체
		// enableFilter: true,		// 구버전으로 사용 안하는걸 추천 위에 filter:true로 대체
		rowHeight:24,
		enableRangeSelection: true, // 정렬 기능 강제여부, true인 경우 정렬이 고정이 된다. 
		animateRows: true,
		suppressHorizontalScroll: true, //가로 스크롤 허용 여부, 자동 조정으로 되어 있으면 불필요. 
		localeText: {noRowsToShow: "There's no result."},	// 데이터가 없을 때 뿌려지는 글
		
		
		// GRID READY 이벤트, 사이즈 자동조정 
		onGridReady: function (event) {
			event.api.sizeColumnsToFit();
		},
		// 창 크기 변경 되었을 때 이벤트 
		onGridSizeChanged: function(event) {
			event.api.sizeColumnsToFit();
		},
		/*
		onCellEditingStarted: function (event) {	// 수정을 시작하면 출력
			console.log('cellEditingStarted');
		} */
		
	};   
	$('#dayAttdList_grid').children().remove();	 
	var eGridDiv = document.querySelector('#dayAttdList_grid');
	new agGrid.Grid(eGridDiv, gridOptions);	
 }	 


/* timePicker시간을 변경하는 함수 */
function convertTimePicker(){
	conversionDate = $("#timePicker").val().replace(":","");
		
	if(conversionDate.indexOf("00")==0){
			conversionDate = $("#timePicker").val().replace(":","").replace("00","24");
	}
	/*
	else if(conversionDate.indexOf("01")==0){
			conversionDate = $("#timePicker").val().replace(":","").replace("01","25");
	}
	*/
}

 


/* 삭제버튼 눌렀을 때 실행되는 함수 */
function removeDayAttdList(){
	var selectedRowData=gridOptions.api.getSelectedRows();
	var sendData = JSON.stringify(selectedRowData);
	
	if(selectedRowData == ""){
		alert("Please select an item to delete.");
	} else {
		$.ajax({
			url : "${pageContext.request.contextPath}/attendance/dayAttendance.do",
			data : {
					"method" : "removeDayAttdList",
					"sendData" : sendData
				},
				dataType : "json",
				success : function(data) {
						if(data.errorCode < 0){
							alert("It's not deleted normally.");
						} else {
	 							alert("It's been deleted.");
						}
						location.reload(); //새로고침
				}
		});		
	}
}


/* 기록버튼 눌렀을 때 실행되는 함수 */ 					// 프로시저로
function registDayAttd(clock,clockTime){	
	// var alertMsg = "조퇴나 외출을 원하시면 근태외 신청을해주세요";
	var clockCheck = clock; 					// 시간을 timepicker로 선택해서 기록할것인지 시계로 기록할것인지 여부를 가릴 변수     
	var checkVar = false; 						// 근태기록 ajax실행 여부를 가릴 변수
	var today = new Date($("#applyDay").val()); // 오늘 요일을 가져오기위한 Date객체
	var dayAttd = {};
  
	if($("#applyDay").val().trim()==""){
			alert("Please enter the date of application.");
			return ;
  	}else if($("#attdTypeName").val()==""){
		alert("Please choose day attendace");
		return;
	}
	convertTimePicker(); // 전역변수 conversionDate에 timePicker선택한 시간을 변환 	(15:04:47 => 

	/* 날릴 데이터 셋팅 */
	if(clockCheck=="Clock"){					// 현시각기록 버튼 클릭시 dayAttd 세팅
		dayAttd ={
					"empCode" : empCode,
					applyDay : $("#applyDay").val(),
					attdTypeCode : $("#attdTypeCode").val(),
    				attdTypeName : $("#attdTypeName").val(),
    				time : clockTime 			// 매개변수 clockTime사용
   				 };
  	}else{										// 기록하기 버튼 클릭시 dayAttd 세팅
  		if(conversionDate==""){
			alert("Please enter the time.");
			return; 
		}
  		if(conversionDate.substring(2,4)>59){
  			console.log(conversionDate.substring(2,4))
  			alert("The minute input is incorrect");
  			return;
  		}
  		dayAttd ={
					"empCode" : empCode,
    				applyDay : $("#applyDay").val(),
    				attdTypeCode : $("#attdTypeCode").val(),
    				attdTypeName : $("#attdTypeName").val(),
    				time : conversionDate 		// 전역변수 conversionDate 사용
   				  };
  	}

	var sendData = JSON.stringify(dayAttd);
	/*
	JSON.stringify() 메서드는 JavaScript 값이나 객체를 JSON 문자열로 변환합니다. 선택적으로, 
	replacer를 함수로 전달할 경우 변환 전 값을 변형할 수 있고, 배열로 전달할 경우 지정한 속성만 결과에 포함합니다.
	*/
		$.ajax({
				url : "${pageContext.request.contextPath}/attendance/dayAttendance.do",
				data : {
						"method" : "registDayAttd",
						"sendData" : sendData
						},
				dataType : "json",
				success : function(data) {
	 				if(data.errorCode < 0){
		 				alert(data.errorMsg);
					}else {
						alert("It's recorded.");
						}
	 				// $("#dayAttdList_tabs").load(location.href + "#dayAttdList_tabs"); // 오른쪽 그리드만 띄우고 싶다 고민중..
	 				//location.reload();
	 				findDayAttdList("applyDay");
				}
		}); 	  	
}


/* 날짜 조회창 함수 */
function getDatePicker(Obj, maxDate) {
	Obj.datepicker({
    changeMonth : true, //월 클릭시 드롭다운형식으로 나열
    changeYear : true, //연도 클릭시 드롭다운형식으로 yearRange내에서 나열
    dateFormat : "yy-mm-dd",
    dayNamesMin : [ "일", "월", "화", "수", "목", "금", "토" ],
    monthNamesShort : [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ],
    yearRange: "2021:2023",
    maxDate : (maxDate==null? "+100Y" : maxDate) //오늘부터 +된만큼 선택 가능 날짜가 정해진다
   	});
}

/* 코드 선택창 띄우는 함수 */
//getCode("CO-09","attdTypeName","attdTypeCode");
function getCode(code,inputText,inputCode){
	//console.log(code,inputText,inputCode);
	var option="width=220; height=200px; left=300px; top=300px; titlebar=no; toolbar=no,status=no,menubar=no,resizable=no, location=no";
	window.open("${pageContext.request.contextPath}/base/codeWindow.html?code="+code+"&inputText="+inputText+"&inputCode="+inputCode,"newwins",option);
	
	/*
	새창을 여는 window.open함수 사용법:
		문법: var ret = window.open(url, name, specs);
	1. url:새창에 보여질 주소 입니다. 선택적인 값으로 비워두면 빈창(about:blank)이 보입니다.
	2. name:새 창이 열리고 창의 이름을 지정합니다. 동일한 이름에 다시 open() 을 하면 기존의 열린창의 내용이 바뀝니다. 
			다른 이름을 사용하면 또다른 새창이 열립니다.
	3.specs:선택적인 값으로 창의 크기, 스크롤여부, 리사이즈 가능등의 속성을 지정합니다. 사용가능한 값을 다음과 같습니다.
	*/
}
</script>

</head>
<body>
	<h4>Day attendance record form</h4>
	<hr/>
	<div>
		<table style="margin: auto;">
			<tr>
				<td>	
					<div id="dayAttdrequest_tabs" >
						<ul>
							<li id="dayAttdrequest_col"><a href="#dayAttdrequest_tab_1">Day attendance record</a></li>
						</ul>
						<div id="dayAttdrequest_tab_1">
							<div style="width: 300px; height: 60px; font-size: 30px; text-align: center;" id="clock">
							</div>
							<table>
								<tr>
									<td>Date</td>
									<td><input type=text id="applyDay" readonly></td>
								</tr>
								<tr>
									<td>Choice</td>
									<td><input type=text autocomplete="off" id="attdTypeName" readonly>
										<input type=hidden id="attdTypeCode">
									</td>
								</tr>
								<tr>
									<td>Time</td>
									<td><input type="text" autocomplete="off" name="timePicker" placeholder="Time selection" id="timePicker" size="10">
										<input type="button" id="registDayAttd_Btn" class="small_Btn" value="Record" />
									</td>
								</tr>
								<tr>
									<td></td>
									<td><input type="button" id="timeCheck_Btn" class="small_Btn" value="Current time record" /></td>
								</tr>
							</table>
							<br />
						</div>
				</div>
				</td>
				<td>
					<div id="dayAttdList_tabs">
					<ul>
						<li><a href="#dayAttdList_tab_1">List of views</a></li>
					</ul>
					<div id="dayAttdList_tab_1">
						<br />
						<button class="small_Btn" id="delete_dayAttd_Btn">Delete</button>
						<br /> <br />
						<div id="dayAttdList_grid" style="height: 280px; width: 420px" class="ag-theme-balham"></div>
					</div>
				</div>
				</td>
			</tr>
		</table>
	</div>
</body>
</html>
